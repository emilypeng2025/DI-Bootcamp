URL: https://github.com/emilypeng2025/DI-Bootcamp/blob/main/week1/day2/dailychallenge.py
suggestions for improvement:
- Challenge 1 is perfectly correct. It fulfills all requirements of the prompt. 
- Challenge 2's solution is partially incorrect. It removes all duplicate characters, not just consecutive ones. For example,  'ppoeemm' becomes 'poem', which is correct, but  'aabbcc' becomes 'abc'  instead of 'abc'. The code should only remove consecutive duplicates, leaving non-consecutive duplicates intact.
- Improve the code for Challenge 2 to handle consecutive duplicates correctly using a loop that compares each character to the previous one.  If they match, the duplicate should be skipped; otherwise, it should be added to the result string.
- Add comments to explain each step, especially in the second challenge where the logic is less intuitive.
- Consider using more descriptive variable names (e.g., instead of `unique_character`, use something like `unique_consecutive_chars`).
- The variable `character_listed` in Challenge 2 is redundant. You can iterate directly over the string `word`.
Brief justification:
- correctness: Challenge 1 correctly takes user inputs, uses a loop to generate multiples, and outputs the list as required. Challenge 2's logic is flawed; it doesn't differentiate between consecutive and non-consecutive duplicates, failing to meet the specification to only remove consecutive duplicates. This leads to incorrect outputs for cases with non-consecutive duplicate letters. 
- readability: The code is reasonably readable. Variable names in Challenge 1 are descriptive.  Challenge 2 could benefit from more informative variable names and comments to explain the logic for removing duplicates, especially since the current implementation doesn't precisely meet the requirements. 
- performance: The performance of both solutions is efficient for the given task and input sizes. Both use a single loop, resulting in linear time complexity.  There are no unnecessary operations, making it quite efficient.
- security: There are no security vulnerabilities in this code. The code only interacts with the user to receive input and displays output. No sensitive data is involved, and there's no interaction with external systems that could introduce security risks.

